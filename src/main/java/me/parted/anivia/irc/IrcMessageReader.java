package me.parted.anivia.irc;

import org.jetbrains.annotations.Nullable;

import java.util.ArrayList;
import java.util.List;

/**
 * The {@code IrcMessageReader} decodes a {@code String} containing the IRC protocol message as described in RFC 2812
 * Section 2.3 and in the IRCv3.2 specification into an {@link me.parted.anivia.irc.IrcMessage}.
 * <p>
 * The code in this class is generated through Ragel, a finite state machine compiler that compiles executable finite
 * state machines from regular languages. As a result, this code is not maintainable except from the Ragel-based input
 * file that contains rules on how to parse the protocol.
 * <p>
 * {@code IrcMessage} objects generated by this class are guaranteed to be validated and conformant upon creation.
 *
 * @author Justin Kaufman
 * @see me.parted.anivia.irc.IrcMessage
 * @since 1.0
 */
public class IrcMessageReader {

    private static final int irc_start = 1;
    private static final byte _irc_actions[] = init__irc_actions_0();
    private static final short _irc_key_offsets[] = init__irc_key_offsets_0();
    private static final char _irc_trans_keys[] = init__irc_trans_keys_0();
    private static final byte _irc_single_lengths[] = init__irc_single_lengths_0();
    private static final byte _irc_range_lengths[] = init__irc_range_lengths_0();
    private static final short _irc_index_offsets[] = init__irc_index_offsets_0();
    private static final short _irc_indicies[] = init__irc_indicies_0();
    private static final short _irc_trans_targs[] = init__irc_trans_targs_0();
    private static final byte _irc_trans_actions[] = init__irc_trans_actions_0();
    private static final byte _irc_eof_actions[] = init__irc_eof_actions_0();

    /**
     * Decodes a {@code String} containing a raw IRC protocol message as described in RFC 2812 Section 2.3 and in the
     * IRCv3.2 specification.
     *
     * @param raw The raw line to be processed.
     * @return An {@code IrcMessage} containing the data processed from the raw line.
     */
    @Nullable
    public static IrcMessage read(String raw) {
        if (raw == null) {
            return null;
        }

        if (raw.length() > 1024) {
            return null;
        }
        /* Construction variables */
        IrcMessage ircMessage = null;

        List<IrcTag> ircTags = new ArrayList<>();
        IrcTag ircTag;
        String tagKey = null;
        String tagValue = null;

        IrcPrefix ircPrefix = null;
        String hostname = null;
        String nickname = null;
        String user = null;
        String host = null;

        String command = null;

        String params = null;

        /* Required tokens for the Ragel FSM */
        char[] data = raw.toCharArray();
        int cs, p = 0, pe = data.length, eof = data.length;
        int s = p; // current index

        {
            cs = irc_start;
        }

        {
            int _klen;
            int _trans;
            int _acts;
            int _nacts;
            int _keys;
            int _goto_targ = 0;

            _goto:
            while (true) {
                switch (_goto_targ) {
                    case 0:
                        if (p == pe) {
                            _goto_targ = 4;
                            continue _goto;
                        }
                        if (cs == 0) {
                            _goto_targ = 5;
                            continue _goto;
                        }
                    case 1:
                        _match:
                        do {
                            _keys = _irc_key_offsets[cs];
                            _trans = _irc_index_offsets[cs];
                            _klen = _irc_single_lengths[cs];
                            if (_klen > 0) {
                                int _lower = _keys;
                                int _mid;
                                int _upper = _keys + _klen - 1;
                                while (true) {
                                    if (_upper < _lower)
                                        break;

                                    _mid = _lower + ((_upper - _lower) >> 1);
                                    if (data[p] < _irc_trans_keys[_mid])
                                        _upper = _mid - 1;
                                    else if (data[p] > _irc_trans_keys[_mid])
                                        _lower = _mid + 1;
                                    else {
                                        _trans += (_mid - _keys);
                                        break _match;
                                    }
                                }
                                _keys += _klen;
                                _trans += _klen;
                            }

                            _klen = _irc_range_lengths[cs];
                            if (_klen > 0) {
                                int _lower = _keys;
                                int _mid;
                                int _upper = _keys + (_klen << 1) - 2;
                                while (true) {
                                    if (_upper < _lower)
                                        break;

                                    _mid = _lower + (((_upper - _lower) >> 1) & ~1);
                                    if (data[p] < _irc_trans_keys[_mid])
                                        _upper = _mid - 2;
                                    else if (data[p] > _irc_trans_keys[_mid + 1])
                                        _lower = _mid + 2;
                                    else {
                                        _trans += ((_mid - _keys) >> 1);
                                        break _match;
                                    }
                                }
                                _trans += _klen;
                            }
                        } while (false);

                        _trans = _irc_indicies[_trans];
                        cs = _irc_trans_targs[_trans];

                        if (_irc_trans_actions[_trans] != 0) {
                            _acts = _irc_trans_actions[_trans];
                            _nacts = (int) _irc_actions[_acts++];
                            while (_nacts-- > 0) {
                                switch (_irc_actions[_acts++]) {
                                    case 0: {
                                        s = p;
                                    }
                                    break;
                                    case 1: {
                                        if (p - s > 512) {
                                            return null;
                                        }
                                    }
                                    break;
                                    case 2: {
                                        tagKey = new String(data, s, p - s);
                                    }
                                    break;
                                    case 3: {
                                        tagValue = new String(data, s, p - s);
                                    }
                                    break;
                                    case 4: {
                                        ircTag = new IrcTag(tagKey, tagValue);
                                        ircTags.add(ircTag);
                                        tagValue = null; // the next tag could have a null value
                                    }
                                    break;
                                    case 5: {
                                        hostname = new String(data, s, p - s);
                                    }
                                    break;
                                    case 6: {
                                        host = new String(data, s, p - s);
                                    }
                                    break;
                                    case 7: {
                                        nickname = new String(data, s, p - s);
                                    }
                                    break;
                                    case 8: {
                                        user = new String(data, s, p - s);
                                    }
                                    break;
                                    case 9: {
                                        if (nickname == null) {
                                            ircPrefix = new IrcPrefix(hostname);
                                        } else {
                                            ircPrefix = new IrcPrefix(nickname, user, host);
                                        }
                                    }
                                    break;
                                    case 10: {
                                        command = new String(data, s, p - s);
                                    }
                                    break;
                                    case 11: {
                                        params = new String(data, s, p - s);
                                    }
                                    break;
                                }
                            }
                        }

                    case 2:
                        if (cs == 0) {
                            _goto_targ = 5;
                            continue _goto;
                        }
                        if (++p != pe) {
                            _goto_targ = 1;
                            continue _goto;
                        }
                    case 4:
                        if (p == eof) {
                            int __acts = _irc_eof_actions[cs];
                            int __nacts = (int) _irc_actions[__acts++];
                            while (__nacts-- > 0) {
                                switch (_irc_actions[__acts++]) {
                                    case 1: {
                                        if (p - s > 512) {
                                            return null;
                                        }
                                    }
                                    break;
                                    case 12: {
                                        ircMessage = new IrcMessage(ircTags, ircPrefix, command, params);
                                    }
                                    break;
                                }
                            }
                        }

                    case 5:
                }
                break;
            }
        }

        return ircMessage;
    }

    private static byte[] init__irc_actions_0() {
        return new byte[]{
                0, 1, 0, 1, 1, 1, 2, 1, 5, 1, 7, 1,
                8, 2, 0, 1, 2, 1, 0, 2, 1, 12, 2, 2,
                4, 2, 3, 4, 2, 5, 9, 2, 6, 9, 2, 7,
                9, 2, 10, 0, 2, 11, 0, 3, 5, 6, 9, 3,
                5, 7, 9, 3, 10, 0, 11
        };
    }

    private static short[] init__irc_key_offsets_0() {
        return new short[]{
                0, 0, 8, 10, 12, 14, 15, 24, 30, 39, 45, 54,
                60, 69, 75, 84, 90, 99, 105, 114, 120, 129, 135, 144,
                150, 159, 165, 174, 180, 189, 195, 204, 210, 219, 225, 226,
                231, 241, 250, 256, 262, 269, 275, 290, 300, 309, 320, 334,
                341, 350, 356, 370, 384, 394, 401, 408, 415, 422, 423, 430,
                437, 444, 451, 452, 459, 466, 473, 480, 481, 488, 495, 502,
                509, 510, 517, 524, 531, 538, 539, 549, 557, 562, 563, 568,
                569, 574, 575, 578, 581, 587, 590, 593, 596, 602, 605, 608,
                611, 617, 620, 627, 634, 635, 642, 649, 656, 663, 671, 679,
                687, 698, 708, 716, 724, 731, 738, 748, 757, 765, 773, 775,
                781, 790, 799, 808, 820, 831, 840, 849, 857, 867, 876, 884,
                892, 894, 903, 912, 921, 930, 942, 953, 962, 971, 979, 989,
                998, 1006, 1014, 1016, 1025, 1034, 1043, 1052, 1064, 1075, 1084, 1093,
                1101, 1111, 1120, 1128, 1136, 1138, 1147, 1156, 1165, 1174, 1186, 1197,
                1206, 1215, 1223, 1233, 1242, 1250, 1258, 1260, 1269, 1278, 1287, 1296,
                1308, 1319, 1328, 1337, 1345, 1346, 1356, 1365, 1373, 1381, 1383, 1392,
                1401, 1410, 1419, 1431, 1442, 1451, 1460, 1468, 1482, 1496, 1510, 1524,
                1538, 1552, 1566, 1580, 1594, 1608, 1622, 1636, 1650, 1664, 1678, 1692,
                1706, 1720, 1734, 1748, 1762, 1776, 1790, 1804, 1818, 1832, 1846, 1860,
                1870, 1881, 1884, 1899, 1907, 1922, 1930, 1945, 1953, 1968, 1976, 1991,
                1999, 2014, 2022, 2037, 2045, 2060, 2068, 2083, 2091, 2106, 2114, 2129,
                2137, 2152, 2160, 2175, 2183, 2198, 2206, 2221, 2229, 2244, 2252, 2267,
                2275, 2290, 2298, 2313, 2321, 2336, 2344, 2359, 2367, 2382, 2390, 2405,
                2413, 2428, 2436, 2451, 2459, 2474, 2482, 2497, 2505, 2520, 2528, 2536,
                2543, 2553, 2560, 2570, 2578, 2590, 2600, 2606, 2615, 2622, 2629
        };
    }

    private static char[] init__irc_trans_keys_0() {
        return new char[]{
                58, 64, 48, 57, 65, 90, 97, 122, 48, 57, 48, 57,
                13, 32, 10, 58, 1, 9, 11, 12, 14, 31, 33, 255,
                13, 32, 1, 9, 11, 255, 58, 1, 9, 11, 12, 14,
                31, 33, 255, 13, 32, 1, 9, 11, 255, 58, 1, 9,
                11, 12, 14, 31, 33, 255, 13, 32, 1, 9, 11, 255,
                58, 1, 9, 11, 12, 14, 31, 33, 255, 13, 32, 1,
                9, 11, 255, 58, 1, 9, 11, 12, 14, 31, 33, 255,
                13, 32, 1, 9, 11, 255, 58, 1, 9, 11, 12, 14,
                31, 33, 255, 13, 32, 1, 9, 11, 255, 58, 1, 9,
                11, 12, 14, 31, 33, 255, 13, 32, 1, 9, 11, 255,
                58, 1, 9, 11, 12, 14, 31, 33, 255, 13, 32, 1,
                9, 11, 255, 58, 1, 9, 11, 12, 14, 31, 33, 255,
                13, 32, 1, 9, 11, 255, 58, 1, 9, 11, 12, 14,
                31, 33, 255, 13, 32, 1, 9, 11, 255, 58, 1, 9,
                11, 12, 14, 31, 33, 255, 13, 32, 1, 9, 11, 255,
                58, 1, 9, 11, 12, 14, 31, 33, 255, 13, 32, 1,
                9, 11, 255, 58, 1, 9, 11, 12, 14, 31, 33, 255,
                13, 32, 1, 9, 11, 255, 58, 1, 9, 11, 12, 14,
                31, 33, 255, 13, 32, 1, 9, 11, 255, 58, 13, 1,
                9, 11, 255, 48, 57, 65, 90, 91, 96, 97, 122, 123,
                125, 32, 45, 46, 48, 57, 65, 90, 97, 122, 48, 57,
                65, 90, 97, 122, 13, 32, 65, 90, 97, 122, 45, 48,
                57, 65, 90, 97, 122, 48, 57, 65, 90, 97, 122, 32,
                33, 45, 46, 64, 48, 57, 65, 90, 91, 96, 97, 122,
                123, 125, 1, 9, 11, 12, 14, 31, 33, 63, 65, 255,
                64, 1, 9, 11, 12, 14, 31, 33, 255, 58, 48, 57,
                65, 70, 71, 90, 97, 102, 103, 122, 32, 45, 46, 58,
                48, 57, 65, 70, 71, 90, 97, 102, 103, 122, 45, 48,
                57, 65, 90, 97, 122, 32, 45, 46, 48, 57, 65, 90,
                97, 122, 48, 57, 65, 90, 97, 122, 32, 45, 46, 58,
                48, 57, 65, 70, 71, 90, 97, 102, 103, 122, 32, 45,
                46, 58, 48, 57, 65, 70, 71, 90, 97, 102, 103, 122,
                32, 45, 46, 58, 48, 57, 65, 90, 97, 122, 58, 48,
                57, 65, 70, 97, 102, 58, 48, 57, 65, 70, 97, 102,
                58, 48, 57, 65, 70, 97, 102, 58, 48, 57, 65, 70,
                97, 102, 58, 58, 48, 57, 65, 70, 97, 102, 58, 48,
                57, 65, 70, 97, 102, 58, 48, 57, 65, 70, 97, 102,
                58, 48, 57, 65, 70, 97, 102, 58, 58, 48, 57, 65,
                70, 97, 102, 58, 48, 57, 65, 70, 97, 102, 58, 48,
                57, 65, 70, 97, 102, 58, 48, 57, 65, 70, 97, 102,
                58, 58, 48, 57, 65, 70, 97, 102, 58, 48, 57, 65,
                70, 97, 102, 58, 48, 57, 65, 70, 97, 102, 58, 48,
                57, 65, 70, 97, 102, 58, 58, 48, 57, 65, 70, 97,
                102, 58, 48, 57, 65, 70, 97, 102, 58, 48, 57, 65,
                70, 97, 102, 58, 48, 57, 65, 70, 97, 102, 58, 48,
                49, 50, 58, 51, 57, 65, 70, 97, 102, 46, 58, 48,
                57, 65, 70, 97, 102, 48, 49, 50, 51, 57, 46, 48,
                49, 50, 51, 57, 46, 48, 49, 50, 51, 57, 32, 32,
                48, 57, 32, 48, 57, 32, 53, 48, 52, 54, 57, 32,
                48, 53, 46, 48, 57, 46, 48, 57, 46, 53, 48, 52,
                54, 57, 46, 48, 53, 46, 48, 57, 46, 48, 57, 46,
                53, 48, 52, 54, 57, 46, 48, 53, 58, 48, 57, 65,
                70, 97, 102, 58, 48, 57, 65, 70, 97, 102, 58, 58,
                48, 57, 65, 70, 97, 102, 32, 48, 57, 65, 70, 97,
                102, 32, 48, 57, 65, 70, 97, 102, 32, 48, 57, 65,
                70, 97, 102, 46, 58, 48, 57, 65, 70, 97, 102, 46,
                58, 48, 57, 65, 70, 97, 102, 46, 58, 48, 57, 65,
                70, 97, 102, 46, 53, 58, 48, 52, 54, 57, 65, 70,
                97, 102, 46, 58, 48, 53, 54, 57, 65, 70, 97, 102,
                46, 58, 48, 57, 65, 70, 97, 102, 46, 58, 48, 57,
                65, 70, 97, 102, 32, 48, 57, 65, 70, 97, 102, 58,
                48, 57, 65, 70, 97, 102, 32, 48, 49, 50, 51, 57,
                65, 70, 97, 102, 32, 46, 58, 48, 57, 65, 70, 97,
                102, 32, 58, 48, 57, 65, 70, 97, 102, 32, 58, 48,
                57, 65, 70, 97, 102, 32, 58, 48, 57, 65, 70, 97,
                102, 32, 46, 58, 48, 57, 65, 70, 97, 102, 32, 46,
                58, 48, 57, 65, 70, 97, 102, 32, 46, 58, 48, 57,
                65, 70, 97, 102, 32, 46, 53, 58, 48, 52, 54, 57,
                65, 70, 97, 102, 32, 46, 58, 48, 53, 54, 57, 65,
                70, 97, 102, 32, 46, 58, 48, 57, 65, 70, 97, 102,
                32, 46, 58, 48, 57, 65, 70, 97, 102, 32, 58, 48,
                57, 65, 70, 97, 102, 32, 48, 49, 50, 51, 57, 65,
                70, 97, 102, 32, 46, 58, 48, 57, 65, 70, 97, 102,
                32, 58, 48, 57, 65, 70, 97, 102, 32, 58, 48, 57,
                65, 70, 97, 102, 32, 58, 48, 49, 50, 51, 57, 65,
                70, 97, 102, 32, 46, 58, 48, 57, 65, 70, 97, 102,
                32, 46, 58, 48, 57, 65, 70, 97, 102, 32, 46, 58,
                48, 57, 65, 70, 97, 102, 32, 46, 53, 58, 48, 52,
                54, 57, 65, 70, 97, 102, 32, 46, 58, 48, 53, 54,
                57, 65, 70, 97, 102, 32, 46, 58, 48, 57, 65, 70,
                97, 102, 32, 46, 58, 48, 57, 65, 70, 97, 102, 32,
                58, 48, 57, 65, 70, 97, 102, 32, 48, 49, 50, 51,
                57, 65, 70, 97, 102, 32, 46, 58, 48, 57, 65, 70,
                97, 102, 32, 58, 48, 57, 65, 70, 97, 102, 32, 58,
                48, 57, 65, 70, 97, 102, 32, 58, 48, 49, 50, 51,
                57, 65, 70, 97, 102, 32, 46, 58, 48, 57, 65, 70,
                97, 102, 32, 46, 58, 48, 57, 65, 70, 97, 102, 32,
                46, 58, 48, 57, 65, 70, 97, 102, 32, 46, 53, 58,
                48, 52, 54, 57, 65, 70, 97, 102, 32, 46, 58, 48,
                53, 54, 57, 65, 70, 97, 102, 32, 46, 58, 48, 57,
                65, 70, 97, 102, 32, 46, 58, 48, 57, 65, 70, 97,
                102, 32, 58, 48, 57, 65, 70, 97, 102, 32, 48, 49,
                50, 51, 57, 65, 70, 97, 102, 32, 46, 58, 48, 57,
                65, 70, 97, 102, 32, 58, 48, 57, 65, 70, 97, 102,
                32, 58, 48, 57, 65, 70, 97, 102, 32, 58, 48, 49,
                50, 51, 57, 65, 70, 97, 102, 32, 46, 58, 48, 57,
                65, 70, 97, 102, 32, 46, 58, 48, 57, 65, 70, 97,
                102, 32, 46, 58, 48, 57, 65, 70, 97, 102, 32, 46,
                53, 58, 48, 52, 54, 57, 65, 70, 97, 102, 32, 46,
                58, 48, 53, 54, 57, 65, 70, 97, 102, 32, 46, 58,
                48, 57, 65, 70, 97, 102, 32, 46, 58, 48, 57, 65,
                70, 97, 102, 32, 58, 48, 57, 65, 70, 97, 102, 32,
                48, 49, 50, 51, 57, 65, 70, 97, 102, 32, 46, 58,
                48, 57, 65, 70, 97, 102, 32, 58, 48, 57, 65, 70,
                97, 102, 32, 58, 48, 57, 65, 70, 97, 102, 32, 58,
                48, 49, 50, 51, 57, 65, 70, 97, 102, 32, 46, 58,
                48, 57, 65, 70, 97, 102, 32, 46, 58, 48, 57, 65,
                70, 97, 102, 32, 46, 58, 48, 57, 65, 70, 97, 102,
                32, 46, 53, 58, 48, 52, 54, 57, 65, 70, 97, 102,
                32, 46, 58, 48, 53, 54, 57, 65, 70, 97, 102, 32,
                46, 58, 48, 57, 65, 70, 97, 102, 32, 46, 58, 48,
                57, 65, 70, 97, 102, 32, 58, 48, 57, 65, 70, 97,
                102, 58, 32, 48, 49, 50, 51, 57, 65, 70, 97, 102,
                32, 46, 58, 48, 57, 65, 70, 97, 102, 32, 58, 48,
                57, 65, 70, 97, 102, 32, 58, 48, 57, 65, 70, 97,
                102, 32, 58, 48, 49, 50, 51, 57, 65, 70, 97, 102,
                32, 46, 58, 48, 57, 65, 70, 97, 102, 32, 46, 58,
                48, 57, 65, 70, 97, 102, 32, 46, 58, 48, 57, 65,
                70, 97, 102, 32, 46, 53, 58, 48, 52, 54, 57, 65,
                70, 97, 102, 32, 46, 58, 48, 53, 54, 57, 65, 70,
                97, 102, 32, 46, 58, 48, 57, 65, 70, 97, 102, 32,
                46, 58, 48, 57, 65, 70, 97, 102, 32, 58, 48, 57,
                65, 70, 97, 102, 32, 33, 45, 64, 48, 57, 65, 90,
                91, 96, 97, 122, 123, 125, 32, 33, 45, 64, 48, 57,
                65, 90, 91, 96, 97, 122, 123, 125, 32, 33, 45, 64,
                48, 57, 65, 90, 91, 96, 97, 122, 123, 125, 32, 33,
                45, 64, 48, 57, 65, 90, 91, 96, 97, 122, 123, 125,
                32, 33, 45, 64, 48, 57, 65, 90, 91, 96, 97, 122,
                123, 125, 32, 33, 45, 64, 48, 57, 65, 90, 91, 96,
                97, 122, 123, 125, 32, 33, 45, 64, 48, 57, 65, 90,
                91, 96, 97, 122, 123, 125, 32, 33, 45, 64, 48, 57,
                65, 90, 91, 96, 97, 122, 123, 125, 32, 33, 45, 64,
                48, 57, 65, 90, 91, 96, 97, 122, 123, 125, 32, 33,
                45, 64, 48, 57, 65, 90, 91, 96, 97, 122, 123, 125,
                32, 33, 45, 64, 48, 57, 65, 90, 91, 96, 97, 122,
                123, 125, 32, 33, 45, 64, 48, 57, 65, 90, 91, 96,
                97, 122, 123, 125, 32, 33, 45, 64, 48, 57, 65, 90,
                91, 96, 97, 122, 123, 125, 32, 33, 45, 64, 48, 57,
                65, 90, 91, 96, 97, 122, 123, 125, 32, 33, 45, 64,
                48, 57, 65, 90, 91, 96, 97, 122, 123, 125, 32, 33,
                45, 64, 48, 57, 65, 90, 91, 96, 97, 122, 123, 125,
                32, 33, 45, 64, 48, 57, 65, 90, 91, 96, 97, 122,
                123, 125, 32, 33, 45, 64, 48, 57, 65, 90, 91, 96,
                97, 122, 123, 125, 32, 33, 45, 64, 48, 57, 65, 90,
                91, 96, 97, 122, 123, 125, 32, 33, 45, 64, 48, 57,
                65, 90, 91, 96, 97, 122, 123, 125, 32, 33, 45, 64,
                48, 57, 65, 90, 91, 96, 97, 122, 123, 125, 32, 33,
                45, 64, 48, 57, 65, 90, 91, 96, 97, 122, 123, 125,
                32, 33, 45, 64, 48, 57, 65, 90, 91, 96, 97, 122,
                123, 125, 32, 33, 45, 64, 48, 57, 65, 90, 91, 96,
                97, 122, 123, 125, 32, 33, 45, 64, 48, 57, 65, 90,
                91, 96, 97, 122, 123, 125, 32, 33, 45, 64, 48, 57,
                65, 90, 91, 96, 97, 122, 123, 125, 32, 33, 45, 64,
                48, 57, 65, 90, 91, 96, 97, 122, 123, 125, 32, 33,
                45, 64, 48, 57, 65, 90, 91, 96, 97, 122, 123, 125,
                32, 33, 45, 64, 48, 57, 65, 90, 97, 122, 32, 33,
                45, 46, 64, 48, 57, 65, 90, 97, 122, 32, 33, 64,
                32, 33, 45, 46, 64, 48, 57, 65, 90, 91, 96, 97,
                122, 123, 125, 32, 33, 45, 64, 48, 57, 65, 125, 32,
                33, 45, 46, 64, 48, 57, 65, 90, 91, 96, 97, 122,
                123, 125, 32, 33, 45, 64, 48, 57, 65, 125, 32, 33,
                45, 46, 64, 48, 57, 65, 90, 91, 96, 97, 122, 123,
                125, 32, 33, 45, 64, 48, 57, 65, 125, 32, 33, 45,
                46, 64, 48, 57, 65, 90, 91, 96, 97, 122, 123, 125,
                32, 33, 45, 64, 48, 57, 65, 125, 32, 33, 45, 46,
                64, 48, 57, 65, 90, 91, 96, 97, 122, 123, 125, 32,
                33, 45, 64, 48, 57, 65, 125, 32, 33, 45, 46, 64,
                48, 57, 65, 90, 91, 96, 97, 122, 123, 125, 32, 33,
                45, 64, 48, 57, 65, 125, 32, 33, 45, 46, 64, 48,
                57, 65, 90, 91, 96, 97, 122, 123, 125, 32, 33, 45,
                64, 48, 57, 65, 125, 32, 33, 45, 46, 64, 48, 57,
                65, 90, 91, 96, 97, 122, 123, 125, 32, 33, 45, 64,
                48, 57, 65, 125, 32, 33, 45, 46, 64, 48, 57, 65,
                90, 91, 96, 97, 122, 123, 125, 32, 33, 45, 64, 48,
                57, 65, 125, 32, 33, 45, 46, 64, 48, 57, 65, 90,
                91, 96, 97, 122, 123, 125, 32, 33, 45, 64, 48, 57,
                65, 125, 32, 33, 45, 46, 64, 48, 57, 65, 90, 91,
                96, 97, 122, 123, 125, 32, 33, 45, 64, 48, 57, 65,
                125, 32, 33, 45, 46, 64, 48, 57, 65, 90, 91, 96,
                97, 122, 123, 125, 32, 33, 45, 64, 48, 57, 65, 125,
                32, 33, 45, 46, 64, 48, 57, 65, 90, 91, 96, 97,
                122, 123, 125, 32, 33, 45, 64, 48, 57, 65, 125, 32,
                33, 45, 46, 64, 48, 57, 65, 90, 91, 96, 97, 122,
                123, 125, 32, 33, 45, 64, 48, 57, 65, 125, 32, 33,
                45, 46, 64, 48, 57, 65, 90, 91, 96, 97, 122, 123,
                125, 32, 33, 45, 64, 48, 57, 65, 125, 32, 33, 45,
                46, 64, 48, 57, 65, 90, 91, 96, 97, 122, 123, 125,
                32, 33, 45, 64, 48, 57, 65, 125, 32, 33, 45, 46,
                64, 48, 57, 65, 90, 91, 96, 97, 122, 123, 125, 32,
                33, 45, 64, 48, 57, 65, 125, 32, 33, 45, 46, 64,
                48, 57, 65, 90, 91, 96, 97, 122, 123, 125, 32, 33,
                45, 64, 48, 57, 65, 125, 32, 33, 45, 46, 64, 48,
                57, 65, 90, 91, 96, 97, 122, 123, 125, 32, 33, 45,
                64, 48, 57, 65, 125, 32, 33, 45, 46, 64, 48, 57,
                65, 90, 91, 96, 97, 122, 123, 125, 32, 33, 45, 64,
                48, 57, 65, 125, 32, 33, 45, 46, 64, 48, 57, 65,
                90, 91, 96, 97, 122, 123, 125, 32, 33, 45, 64, 48,
                57, 65, 125, 32, 33, 45, 46, 64, 48, 57, 65, 90,
                91, 96, 97, 122, 123, 125, 32, 33, 45, 64, 48, 57,
                65, 125, 32, 33, 45, 46, 64, 48, 57, 65, 90, 91,
                96, 97, 122, 123, 125, 32, 33, 45, 64, 48, 57, 65,
                125, 32, 33, 45, 46, 64, 48, 57, 65, 90, 91, 96,
                97, 122, 123, 125, 32, 33, 45, 64, 48, 57, 65, 125,
                32, 33, 45, 46, 64, 48, 57, 65, 90, 91, 96, 97,
                122, 123, 125, 32, 33, 45, 64, 48, 57, 65, 125, 32,
                33, 45, 46, 64, 48, 57, 65, 90, 91, 96, 97, 122,
                123, 125, 32, 33, 45, 64, 48, 57, 65, 125, 32, 33,
                45, 46, 64, 48, 57, 65, 90, 91, 96, 97, 122, 123,
                125, 32, 33, 45, 64, 48, 57, 65, 125, 32, 33, 45,
                46, 64, 48, 57, 65, 90, 91, 96, 97, 122, 123, 125,
                32, 33, 45, 64, 48, 57, 65, 125, 32, 33, 45, 64,
                48, 57, 65, 125, 45, 48, 57, 65, 90, 97, 122, 32,
                45, 59, 61, 48, 57, 65, 90, 97, 122, 58, 48, 57,
                65, 90, 97, 122, 1, 9, 11, 12, 14, 31, 33, 58,
                60, 255, 32, 59, 1, 9, 11, 12, 14, 255, 32, 45,
                46, 47, 59, 61, 48, 57, 65, 90, 97, 122, 32, 45,
                59, 61, 48, 57, 65, 90, 97, 122, 48, 57, 65, 90,
                97, 122, 45, 46, 47, 48, 57, 65, 90, 97, 122, 45,
                48, 57, 65, 90, 97, 122, 45, 48, 57, 65, 90, 97,
                122, 0
        };
    }

    private static byte[] init__irc_single_lengths_0() {
        return new byte[]{
                0, 2, 0, 0, 2, 1, 1, 2, 1, 2, 1, 2,
                1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
                1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 1,
                0, 3, 0, 2, 1, 0, 5, 0, 1, 1, 4, 1,
                3, 0, 4, 4, 4, 1, 1, 1, 1, 1, 1, 1,
                1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
                1, 1, 1, 1, 1, 1, 4, 2, 3, 1, 3, 1,
                3, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1,
                2, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2,
                3, 2, 2, 2, 1, 1, 4, 3, 2, 2, 2, 0,
                3, 3, 3, 4, 3, 3, 3, 2, 4, 3, 2, 2,
                2, 3, 3, 3, 3, 4, 3, 3, 3, 2, 4, 3,
                2, 2, 2, 3, 3, 3, 3, 4, 3, 3, 3, 2,
                4, 3, 2, 2, 2, 3, 3, 3, 3, 4, 3, 3,
                3, 2, 4, 3, 2, 2, 2, 3, 3, 3, 3, 4,
                3, 3, 3, 2, 1, 4, 3, 2, 2, 2, 3, 3,
                3, 3, 4, 3, 3, 3, 2, 4, 4, 4, 4, 4,
                4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
                4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
                5, 3, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4,
                5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4,
                5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4,
                5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4,
                5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 4, 1,
                4, 1, 0, 2, 6, 4, 0, 3, 1, 1, 0
        };
    }

    private static byte[] init__irc_range_lengths_0() {
        return new byte[]{
                0, 3, 1, 1, 0, 0, 4, 2, 4, 2, 4, 2,
                4, 2, 4, 2, 4, 2, 4, 2, 4, 2, 4, 2,
                4, 2, 4, 2, 4, 2, 4, 2, 4, 2, 0, 2,
                5, 3, 3, 2, 3, 3, 5, 5, 4, 5, 5, 3,
                3, 3, 5, 5, 3, 3, 3, 3, 3, 0, 3, 3,
                3, 3, 0, 3, 3, 3, 3, 0, 3, 3, 3, 3,
                0, 3, 3, 3, 3, 0, 3, 3, 1, 0, 1, 0,
                1, 0, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1,
                2, 1, 3, 3, 0, 3, 3, 3, 3, 3, 3, 3,
                4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 0, 3,
                3, 3, 3, 4, 4, 3, 3, 3, 3, 3, 3, 3,
                0, 3, 3, 3, 3, 4, 4, 3, 3, 3, 3, 3,
                3, 3, 0, 3, 3, 3, 3, 4, 4, 3, 3, 3,
                3, 3, 3, 3, 0, 3, 3, 3, 3, 4, 4, 3,
                3, 3, 3, 3, 3, 3, 0, 3, 3, 3, 3, 4,
                4, 3, 3, 3, 0, 3, 3, 3, 3, 0, 3, 3,
                3, 3, 4, 4, 3, 3, 3, 5, 5, 5, 5, 5,
                5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,
                5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 3,
                3, 0, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2,
                5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2,
                5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2,
                5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2,
                5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 2, 3,
                3, 3, 5, 3, 3, 3, 3, 3, 3, 3, 0
        };
    }

    private static short[] init__irc_index_offsets_0() {
        return new short[]{
                0, 0, 6, 8, 10, 13, 15, 21, 26, 32, 37, 43,
                48, 54, 59, 65, 70, 76, 81, 87, 92, 98, 103, 109,
                114, 120, 125, 131, 136, 142, 147, 153, 158, 164, 169, 171,
                175, 181, 188, 192, 197, 202, 206, 217, 223, 229, 236, 246,
                251, 258, 262, 272, 282, 290, 295, 300, 305, 310, 312, 317,
                322, 327, 332, 334, 339, 344, 349, 354, 356, 361, 366, 371,
                376, 378, 383, 388, 393, 398, 400, 408, 414, 419, 421, 426,
                428, 433, 435, 438, 441, 446, 449, 452, 455, 460, 463, 466,
                469, 474, 477, 482, 487, 489, 494, 499, 504, 509, 515, 521,
                527, 535, 542, 548, 554, 559, 564, 572, 579, 585, 591, 594,
                598, 605, 612, 619, 628, 636, 643, 650, 656, 664, 671, 677,
                683, 686, 693, 700, 707, 714, 723, 731, 738, 745, 751, 759,
                766, 772, 778, 781, 788, 795, 802, 809, 818, 826, 833, 840,
                846, 854, 861, 867, 873, 876, 883, 890, 897, 904, 913, 921,
                928, 935, 941, 949, 956, 962, 968, 971, 978, 985, 992, 999,
                1008, 1016, 1023, 1030, 1036, 1038, 1046, 1053, 1059, 1065, 1068, 1075,
                1082, 1089, 1096, 1105, 1113, 1120, 1127, 1133, 1143, 1153, 1163, 1173,
                1183, 1193, 1203, 1213, 1223, 1233, 1243, 1253, 1263, 1273, 1283, 1293,
                1303, 1313, 1323, 1333, 1343, 1353, 1363, 1373, 1383, 1393, 1403, 1413,
                1421, 1430, 1434, 1445, 1452, 1463, 1470, 1481, 1488, 1499, 1506, 1517,
                1524, 1535, 1542, 1553, 1560, 1571, 1578, 1589, 1596, 1607, 1614, 1625,
                1632, 1643, 1650, 1661, 1668, 1679, 1686, 1697, 1704, 1715, 1722, 1733,
                1740, 1751, 1758, 1769, 1776, 1787, 1794, 1805, 1812, 1823, 1830, 1841,
                1848, 1859, 1866, 1877, 1884, 1895, 1902, 1913, 1920, 1931, 1938, 1945,
                1950, 1958, 1963, 1969, 1975, 1985, 1993, 1997, 2004, 2009, 2014
        };
    }

    private static short[] init__irc_indicies_0() {
        return new short[]{
                2, 3, 0, 4, 4, 1, 5, 1, 6, 1, 7, 8,
                1, 9, 1, 11, 10, 10, 10, 10, 1, 12, 13, 10,
                10, 1, 11, 14, 14, 14, 14, 1, 12, 15, 14, 14,
                1, 11, 16, 16, 16, 16, 1, 12, 17, 16, 16, 1,
                11, 18, 18, 18, 18, 1, 12, 19, 18, 18, 1, 11,
                20, 20, 20, 20, 1, 12, 21, 20, 20, 1, 11, 22,
                22, 22, 22, 1, 12, 23, 22, 22, 1, 11, 24, 24,
                24, 24, 1, 12, 25, 24, 24, 1, 11, 26, 26, 26,
                26, 1, 12, 27, 26, 26, 1, 11, 28, 28, 28, 28,
                1, 12, 29, 28, 28, 1, 11, 30, 30, 30, 30, 1,
                12, 31, 30, 30, 1, 11, 32, 32, 32, 32, 1, 12,
                33, 32, 32, 1, 11, 34, 34, 34, 34, 1, 12, 35,
                34, 34, 1, 11, 36, 36, 36, 36, 1, 12, 37, 36,
                36, 1, 11, 38, 38, 38, 38, 1, 12, 39, 38, 38,
                1, 11, 1, 12, 11, 11, 1, 40, 41, 42, 41, 42,
                1, 43, 44, 45, 46, 46, 46, 1, 47, 48, 48, 1,
                7, 8, 49, 49, 1, 44, 46, 46, 46, 1, 46, 46,
                46, 1, 50, 51, 52, 45, 54, 53, 53, 55, 53, 55,
                1, 56, 56, 56, 56, 56, 1, 58, 57, 57, 57, 57,
                1, 60, 59, 59, 61, 59, 61, 1, 62, 63, 64, 66,
                65, 65, 67, 65, 67, 1, 63, 67, 67, 67, 1, 62,
                63, 64, 67, 67, 67, 1, 67, 67, 67, 1, 62, 63,
                64, 66, 68, 68, 67, 68, 67, 1, 62, 63, 64, 66,
                69, 69, 67, 69, 67, 1, 62, 63, 64, 66, 67, 67,
                67, 1, 71, 70, 70, 70, 1, 73, 72, 72, 72, 1,
                73, 74, 74, 74, 1, 73, 75, 75, 75, 1, 73, 1,
                77, 76, 76, 76, 1, 79, 78, 78, 78, 1, 79, 80,
                80, 80, 1, 79, 81, 81, 81, 1, 79, 1, 83, 82,
                82, 82, 1, 85, 84, 84, 84, 1, 85, 86, 86, 86,
                1, 85, 87, 87, 87, 1, 85, 1, 89, 88, 88, 88,
                1, 91, 90, 90, 90, 1, 91, 92, 92, 92, 1, 91,
                93, 93, 93, 1, 91, 1, 95, 94, 94, 94, 1, 97,
                96, 96, 96, 1, 97, 98, 98, 98, 1, 97, 99, 99,
                99, 1, 97, 1, 100, 101, 102, 104, 103, 105, 105, 1,
                106, 108, 107, 107, 107, 1, 109, 110, 111, 112, 1, 113,
                1, 114, 115, 116, 117, 1, 118, 1, 119, 120, 121, 122,
                1, 123, 1, 123, 122, 1, 123, 119, 1, 123, 124, 122,
                119, 1, 123, 119, 1, 118, 117, 1, 118, 114, 1, 118,
                125, 117, 114, 1, 118, 114, 1, 113, 112, 1, 113, 109,
                1, 113, 126, 112, 109, 1, 113, 109, 1, 108, 127, 127,
                127, 1, 108, 128, 128, 128, 1, 108, 1, 119, 129, 129,
                129, 1, 123, 130, 130, 130, 1, 123, 131, 131, 131, 1,
                123, 119, 119, 119, 1, 106, 108, 132, 107, 107, 1, 106,
                108, 133, 127, 127, 1, 106, 108, 128, 128, 128, 1, 106,
                134, 108, 132, 135, 107, 107, 1, 106, 108, 133, 127, 127,
                127, 1, 106, 108, 127, 127, 127, 1, 106, 108, 135, 107,
                107, 1, 123, 129, 129, 129, 1, 108, 107, 107, 107, 1,
                123, 136, 137, 138, 139, 140, 140, 1, 123, 106, 142, 141,
                141, 141, 1, 123, 142, 143, 143, 143, 1, 123, 142, 144,
                144, 144, 1, 123, 142, 1, 129, 129, 129, 1, 123, 106,
                142, 145, 141, 141, 1, 123, 106, 142, 146, 143, 143, 1,
                123, 106, 142, 144, 144, 144, 1, 123, 106, 147, 142, 145,
                148, 141, 141, 1, 123, 106, 142, 146, 143, 143, 143, 1,
                123, 106, 142, 143, 143, 143, 1, 123, 106, 142, 148, 141,
                141, 1, 123, 142, 141, 141, 141, 1, 123, 149, 150, 151,
                152, 153, 153, 1, 123, 106, 155, 154, 154, 154, 1, 123,
                155, 156, 156, 156, 1, 123, 155, 157, 157, 157, 1, 123,
                155, 1, 136, 137, 138, 139, 140, 140, 1, 123, 106, 155,
                158, 154, 154, 1, 123, 106, 155, 159, 156, 156, 1, 123,
                106, 155, 157, 157, 157, 1, 123, 106, 160, 155, 158, 161,
                154, 154, 1, 123, 106, 155, 159, 156, 156, 156, 1, 123,
                106, 155, 156, 156, 156, 1, 123, 106, 155, 161, 154, 154,
                1, 123, 155, 154, 154, 154, 1, 123, 162, 163, 164, 165,
                166, 166, 1, 123, 106, 168, 167, 167, 167, 1, 123, 168,
                169, 169, 169, 1, 123, 168, 170, 170, 170, 1, 123, 168,
                1, 149, 150, 151, 152, 153, 153, 1, 123, 106, 168, 171,
                167, 167, 1, 123, 106, 168, 172, 169, 169, 1, 123, 106,
                168, 170, 170, 170, 1, 123, 106, 173, 168, 171, 174, 167,
                167, 1, 123, 106, 168, 172, 169, 169, 169, 1, 123, 106,
                168, 169, 169, 169, 1, 123, 106, 168, 174, 167, 167, 1,
                123, 168, 167, 167, 167, 1, 123, 175, 176, 177, 178, 179,
                179, 1, 123, 106, 181, 180, 180, 180, 1, 123, 181, 182,
                182, 182, 1, 123, 181, 183, 183, 183, 1, 123, 181, 1,
                162, 163, 164, 165, 166, 166, 1, 123, 106, 181, 184, 180,
                180, 1, 123, 106, 181, 185, 182, 182, 1, 123, 106, 181,
                183, 183, 183, 1, 123, 106, 186, 181, 184, 187, 180, 180,
                1, 123, 106, 181, 185, 182, 182, 182, 1, 123, 106, 181,
                182, 182, 182, 1, 123, 106, 181, 187, 180, 180, 1, 123,
                181, 180, 180, 180, 1, 123, 188, 189, 190, 191, 192, 192,
                1, 123, 106, 194, 193, 193, 193, 1, 123, 194, 195, 195,
                195, 1, 123, 194, 196, 196, 196, 1, 123, 194, 1, 175,
                176, 177, 178, 179, 179, 1, 123, 106, 194, 197, 193, 193,
                1, 123, 106, 194, 198, 195, 195, 1, 123, 106, 194, 196,
                196, 196, 1, 123, 106, 199, 194, 197, 200, 193, 193, 1,
                123, 106, 194, 198, 195, 195, 195, 1, 123, 106, 194, 195,
                195, 195, 1, 123, 106, 194, 200, 193, 193, 1, 123, 194,
                193, 193, 193, 1, 201, 1, 123, 202, 203, 204, 205, 206,
                206, 1, 123, 106, 208, 207, 207, 207, 1, 123, 208, 209,
                209, 209, 1, 123, 208, 210, 210, 210, 1, 123, 208, 1,
                188, 189, 190, 191, 192, 192, 1, 123, 106, 208, 211, 207,
                207, 1, 123, 106, 208, 212, 209, 209, 1, 123, 106, 208,
                210, 210, 210, 1, 123, 106, 213, 208, 211, 214, 207, 207,
                1, 123, 106, 208, 212, 209, 209, 209, 1, 123, 106, 208,
                209, 209, 209, 1, 123, 106, 208, 214, 207, 207, 1, 123,
                208, 207, 207, 207, 1, 215, 51, 216, 54, 217, 217, 218,
                217, 218, 1, 215, 51, 219, 54, 220, 220, 221, 220, 221,
                1, 215, 51, 222, 54, 223, 223, 224, 223, 224, 1, 215,
                51, 225, 54, 226, 226, 227, 226, 227, 1, 215, 51, 228,
                54, 229, 229, 230, 229, 230, 1, 215, 51, 231, 54, 232,
                232, 233, 232, 233, 1, 215, 51, 234, 54, 235, 235, 236,
                235, 236, 1, 215, 51, 237, 54, 238, 238, 239, 238, 239,
                1, 215, 51, 240, 54, 241, 241, 242, 241, 242, 1, 215,
                51, 243, 54, 244, 244, 245, 244, 245, 1, 215, 51, 246,
                54, 247, 247, 248, 247, 248, 1, 215, 51, 249, 54, 250,
                250, 251, 250, 251, 1, 215, 51, 252, 54, 253, 253, 254,
                253, 254, 1, 215, 51, 255, 54, 256, 256, 257, 256, 257,
                1, 215, 51, 258, 54, 259, 259, 260, 259, 260, 1, 215,
                51, 261, 54, 262, 262, 263, 262, 263, 1, 215, 51, 264,
                54, 265, 265, 266, 265, 266, 1, 215, 51, 267, 54, 268,
                268, 269, 268, 269, 1, 215, 51, 270, 54, 271, 271, 272,
                271, 272, 1, 215, 51, 273, 54, 274, 274, 275, 274, 275,
                1, 215, 51, 276, 54, 277, 277, 278, 277, 278, 1, 215,
                51, 279, 54, 280, 280, 281, 280, 281, 1, 215, 51, 282,
                54, 283, 283, 284, 283, 284, 1, 215, 51, 285, 54, 286,
                286, 287, 286, 287, 1, 215, 51, 288, 54, 289, 289, 290,
                289, 290, 1, 215, 51, 291, 54, 292, 292, 293, 292, 293,
                1, 215, 51, 294, 54, 295, 295, 296, 295, 296, 1, 215,
                51, 297, 54, 298, 298, 299, 298, 299, 1, 215, 51, 44,
                54, 46, 46, 46, 1, 50, 51, 44, 45, 54, 46, 46,
                46, 1, 215, 51, 54, 1, 50, 51, 297, 45, 54, 298,
                298, 299, 298, 299, 1, 215, 51, 299, 54, 299, 299, 1,
                50, 51, 294, 45, 54, 295, 295, 296, 295, 296, 1, 215,
                51, 296, 54, 296, 296, 1, 50, 51, 291, 45, 54, 292,
                292, 293, 292, 293, 1, 215, 51, 293, 54, 293, 293, 1,
                50, 51, 288, 45, 54, 289, 289, 290, 289, 290, 1, 215,
                51, 290, 54, 290, 290, 1, 50, 51, 285, 45, 54, 286,
                286, 287, 286, 287, 1, 215, 51, 287, 54, 287, 287, 1,
                50, 51, 282, 45, 54, 283, 283, 284, 283, 284, 1, 215,
                51, 284, 54, 284, 284, 1, 50, 51, 279, 45, 54, 280,
                280, 281, 280, 281, 1, 215, 51, 281, 54, 281, 281, 1,
                50, 51, 276, 45, 54, 277, 277, 278, 277, 278, 1, 215,
                51, 278, 54, 278, 278, 1, 50, 51, 273, 45, 54, 274,
                274, 275, 274, 275, 1, 215, 51, 275, 54, 275, 275, 1,
                50, 51, 270, 45, 54, 271, 271, 272, 271, 272, 1, 215,
                51, 272, 54, 272, 272, 1, 50, 51, 267, 45, 54, 268,
                268, 269, 268, 269, 1, 215, 51, 269, 54, 269, 269, 1,
                50, 51, 264, 45, 54, 265, 265, 266, 265, 266, 1, 215,
                51, 266, 54, 266, 266, 1, 50, 51, 261, 45, 54, 262,
                262, 263, 262, 263, 1, 215, 51, 263, 54, 263, 263, 1,
                50, 51, 258, 45, 54, 259, 259, 260, 259, 260, 1, 215,
                51, 260, 54, 260, 260, 1, 50, 51, 255, 45, 54, 256,
                256, 257, 256, 257, 1, 215, 51, 257, 54, 257, 257, 1,
                50, 51, 252, 45, 54, 253, 253, 254, 253, 254, 1, 215,
                51, 254, 54, 254, 254, 1, 50, 51, 249, 45, 54, 250,
                250, 251, 250, 251, 1, 215, 51, 251, 54, 251, 251, 1,
                50, 51, 246, 45, 54, 247, 247, 248, 247, 248, 1, 215,
                51, 248, 54, 248, 248, 1, 50, 51, 243, 45, 54, 244,
                244, 245, 244, 245, 1, 215, 51, 245, 54, 245, 245, 1,
                50, 51, 240, 45, 54, 241, 241, 242, 241, 242, 1, 215,
                51, 242, 54, 242, 242, 1, 50, 51, 237, 45, 54, 238,
                238, 239, 238, 239, 1, 215, 51, 239, 54, 239, 239, 1,
                50, 51, 234, 45, 54, 235, 235, 236, 235, 236, 1, 215,
                51, 236, 54, 236, 236, 1, 50, 51, 231, 45, 54, 232,
                232, 233, 232, 233, 1, 215, 51, 233, 54, 233, 233, 1,
                50, 51, 228, 45, 54, 229, 229, 230, 229, 230, 1, 215,
                51, 230, 54, 230, 230, 1, 50, 51, 225, 45, 54, 226,
                226, 227, 226, 227, 1, 215, 51, 227, 54, 227, 227, 1,
                50, 51, 222, 45, 54, 223, 223, 224, 223, 224, 1, 215,
                51, 224, 54, 224, 224, 1, 50, 51, 219, 45, 54, 220,
                220, 221, 220, 221, 1, 215, 51, 221, 54, 221, 221, 1,
                50, 51, 216, 45, 54, 217, 217, 218, 217, 218, 1, 215,
                51, 218, 54, 218, 218, 1, 215, 51, 55, 54, 55, 55,
                1, 300, 301, 301, 301, 1, 302, 303, 304, 305, 303, 303,
                303, 1, 307, 306, 308, 308, 1, 309, 309, 309, 309, 309,
                1, 311, 312, 310, 310, 310, 1, 302, 313, 314, 315, 304,
                305, 316, 316, 316, 1, 302, 313, 304, 305, 316, 316, 316,
                1, 317, 317, 317, 1, 318, 314, 315, 317, 317, 317, 1,
                318, 317, 317, 317, 1, 303, 303, 303, 303, 1, 1, 0
        };
    }

    private static short[] init__irc_trans_targs_0() {
        return new short[]{
                2, 0, 36, 287, 39, 3, 4, 5, 6, 298, 7, 35,
                5, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18,
                19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30,
                31, 32, 33, 34, 37, 42, 286, 38, 40, 41, 37, 2,
                39, 39, 38, 43, 199, 284, 45, 285, 44, 44, 45, 46,
                184, 48, 38, 47, 49, 50, 53, 48, 51, 52, 54, 170,
                55, 58, 56, 57, 59, 156, 60, 63, 61, 62, 64, 142,
                65, 68, 66, 67, 69, 128, 70, 73, 71, 72, 74, 114,
                75, 78, 76, 77, 79, 105, 108, 111, 112, 113, 80, 98,
                101, 81, 94, 96, 95, 82, 83, 90, 92, 91, 84, 85,
                86, 88, 87, 38, 89, 93, 97, 99, 100, 102, 103, 104,
                106, 107, 109, 110, 115, 120, 123, 126, 127, 116, 119, 117,
                118, 121, 122, 124, 125, 129, 134, 137, 140, 141, 130, 133,
                131, 132, 135, 136, 138, 139, 143, 148, 151, 154, 155, 144,
                147, 145, 146, 149, 150, 152, 153, 157, 162, 165, 168, 169,
                158, 161, 159, 160, 163, 164, 166, 167, 171, 176, 179, 182,
                183, 172, 175, 173, 174, 177, 178, 180, 181, 185, 186, 191,
                194, 197, 198, 187, 190, 188, 189, 192, 193, 195, 196, 38,
                200, 282, 283, 201, 280, 281, 202, 278, 279, 203, 276, 277,
                204, 274, 275, 205, 272, 273, 206, 270, 271, 207, 268, 269,
                208, 266, 267, 209, 264, 265, 210, 262, 263, 211, 260, 261,
                212, 258, 259, 213, 256, 257, 214, 254, 255, 215, 252, 253,
                216, 250, 251, 217, 248, 249, 218, 246, 247, 219, 244, 245,
                220, 242, 243, 221, 240, 241, 222, 238, 239, 223, 236, 237,
                224, 234, 235, 225, 232, 233, 226, 230, 231, 227, 228, 229,
                288, 292, 289, 288, 287, 290, 2, 36, 39, 291, 291, 289,
                287, 293, 294, 297, 292, 295, 296
        };
    }

    private static byte[] init__irc_trans_actions_0() {
        return new byte[]{
                13, 0, 13, 1, 13, 0, 0, 51, 37, 0, 0, 0,
                40, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 1, 1, 1, 28, 0, 0, 0, 1,
                1, 0, 47, 9, 0, 0, 9, 0, 1, 0, 11, 1,
                1, 1, 43, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 31, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 34,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                1, 1, 22, 0, 22, 5, 16, 3, 16, 1, 0, 25,
                25, 0, 0, 7, 0, 0, 0
        };
    }

    private static byte[] init__irc_eof_actions_0() {
        return new byte[]{
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 19
        };
    }


}
